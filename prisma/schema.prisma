// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id    String     @id @default(cuid())
  email String  @unique
  emailVerified DateTime? 
  name  String?
  image String?
  posts Post[]
  comments Comment[]
  accounts      Account[]
  sessions      Session[]
}

model Post {
  id        Int     @id @default(autoincrement())
  createdAt DateTime @default(now())
  title     String
  ingredients   Ingredient[] 
  published Boolean @default(false)
  author    User    @relation(fields: [authorId], references: [id])
  authorId  String
  cuisine   Cuisine @relation(fields: [cuisineId], references: [id])
  cuisineId Int
  comments  Comment[]
}

model Ingredient {
    id        Int     @id @default(autoincrement())
    title     String
    amount    String
    posts     Post []
}


model Cuisine {
    id        Int     @id @default(autoincrement())
    title     String
    posts     Post[]

}

model Comment { 
    id      Int   @id @default(autoincrement())
    Post    Post  @relation(fields: [postId], references: [id])
    postId  Int
    author    User    @relation(fields: [authorId], references: [id])
    authorId  String
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}


model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}